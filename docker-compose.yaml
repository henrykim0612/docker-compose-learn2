########################################
#  개발을 완료하고 배포 하는 환경이라고 가정함
########################################
version: '3.8'

services:
  ######################################
  # Deployment Containers
  ######################################
  # NGINX 에 대한 설정
  server:
    build:
      # context 를 `.` 로 설정한 이유는 아래 volume 설정 때문(같은 경로에 src, nginx 폴더가 있어서)
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - '8000:80'
    # 바인드 마운트는 개발용으로만 사용됨
#    volumes:
#      - ./src:/var/www/html
#      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    # 이 설정으로 docker-compose run server 하면 php, mysql 이 같이 기동됨
    depends_on:
      - php
      - mysql
  php:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
#    volumes:
#      - ./src:/var/www/html:delegated
  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env

  ######################################
  # Utility Containers
  ######################################
  # npm init 같은 php 전용 파일들은 src 하위에 만들어 주기 위한 컨테이너(docker-compose run 으로 실행됨)
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html
  # Laravel 마이그레이션 전용 컨테이너(docker-compose run 으로 실행됨)
  artisan:
    build:
      context: .
      # 동일한 dockerfile 을 사용함(설정이 같다면 재사용)
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    # dockerfile 은 같지만 엔트리 포인트를 추가적으로 설정하여 Overwrite 함
    entrypoint: ['php', '/var/www/html/artisan']
  # 이거는 그냥 예시 컨테이너(docker-compose run 으로 실행됨)
  npm:
    image: node:14
    # dockerfile 을 만들지 않고 아래처럼 설정할 수 있는데 이거는 비추천(COPY, RUN 이런건 설정할 수도 없음)
    working_dir: /var/www/html
    entrypoint: ['npm']
    volumes:
      - ./src:/var/www/html
